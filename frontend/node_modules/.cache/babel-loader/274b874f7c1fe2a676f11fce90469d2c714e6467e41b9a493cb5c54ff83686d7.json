{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mohit\\\\OneDrive\\\\Desktop\\\\finance_tracker_main\\\\frontend\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect } from 'react';\nimport { logout as apiLogout } from '../services/authService';\nimport { setAuthToken } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport default function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    const storedToken = localStorage.getItem('token');\n    if (storedUser && storedToken) {\n      setUser(JSON.parse(storedUser));\n      setToken(storedToken);\n      setAuthToken(storedToken); // Set token on mount if exists\n      console.log('AuthContext: Loaded token from localStorage:', storedToken);\n    } else {\n      console.log('AuthContext: No token or user found in localStorage');\n    }\n  }, []);\n  const login = userData => {\n    setUser(userData.user);\n    setToken(userData.token);\n    localStorage.setItem('user', JSON.stringify(userData.user));\n    localStorage.setItem('token', userData.token);\n    setAuthToken(userData.token); // Set token on login\n    console.log('AuthContext: Logged in with token:', userData.token);\n  };\n  const logout = async () => {\n    await apiLogout();\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    setAuthToken(null); // Remove token on logout\n    console.log('AuthContext: Logged out, token removed');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      token,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"cANLe8RtnwDE5y1hInrXoZDdgy8=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","logout","apiLogout","setAuthToken","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","token","setToken","storedUser","localStorage","getItem","storedToken","JSON","parse","console","log","login","userData","setItem","stringify","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mohit/OneDrive/Desktop/finance_tracker_main/frontend/src/context/AuthContext.jsx"],"sourcesContent":["import { createContext, useState, useEffect } from 'react';\nimport { logout as apiLogout } from '../services/authService';\nimport { setAuthToken } from '../services/api';\n\nexport const AuthContext = createContext();\n\nexport default function AuthProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n\nuseEffect(() => {\n  const storedUser = localStorage.getItem('user');\n  const storedToken = localStorage.getItem('token');\n  if (storedUser && storedToken) {\n    setUser(JSON.parse(storedUser));\n    setToken(storedToken);\n    setAuthToken(storedToken); // Set token on mount if exists\n    console.log('AuthContext: Loaded token from localStorage:', storedToken);\n  } else {\n    console.log('AuthContext: No token or user found in localStorage');\n  }\n}, []);\n\n const login = (userData) => {\n  setUser(userData.user);\n  setToken(userData.token);\n  localStorage.setItem('user', JSON.stringify(userData.user));\n  localStorage.setItem('token', userData.token);\n  setAuthToken(userData.token); // Set token on login\n  console.log('AuthContext: Logged in with token:', userData.token);\n};\nconst logout = async () => {\n  await apiLogout();\n  setUser(null);\n  setToken(null);\n  localStorage.removeItem('user');\n  localStorage.removeItem('token');\n  setAuthToken(null); // Remove token on logout\n  console.log('AuthContext: Logged out, token removed');\n};\n\n  return (\n    <AuthContext.Provider value={{ user, token, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC1D,SAASC,MAAM,IAAIC,SAAS,QAAQ,yBAAyB;AAC7D,SAASC,YAAY,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,OAAO,MAAMC,WAAW,gBAAGR,aAAa,CAAC,CAAC;AAE1C,eAAe,SAASS,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACjD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACd,MAAMc,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,MAAMC,WAAW,GAAGF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACjD,IAAIF,UAAU,IAAIG,WAAW,EAAE;MAC7BN,OAAO,CAACO,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC,CAAC;MAC/BD,QAAQ,CAACI,WAAW,CAAC;MACrBd,YAAY,CAACc,WAAW,CAAC,CAAC,CAAC;MAC3BG,OAAO,CAACC,GAAG,CAAC,8CAA8C,EAAEJ,WAAW,CAAC;IAC1E,CAAC,MAAM;MACLG,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC;IACpE;EACF,CAAC,EAAE,EAAE,CAAC;EAEL,MAAMC,KAAK,GAAIC,QAAQ,IAAK;IAC3BZ,OAAO,CAACY,QAAQ,CAACb,IAAI,CAAC;IACtBG,QAAQ,CAACU,QAAQ,CAACX,KAAK,CAAC;IACxBG,YAAY,CAACS,OAAO,CAAC,MAAM,EAAEN,IAAI,CAACO,SAAS,CAACF,QAAQ,CAACb,IAAI,CAAC,CAAC;IAC3DK,YAAY,CAACS,OAAO,CAAC,OAAO,EAAED,QAAQ,CAACX,KAAK,CAAC;IAC7CT,YAAY,CAACoB,QAAQ,CAACX,KAAK,CAAC,CAAC,CAAC;IAC9BQ,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEE,QAAQ,CAACX,KAAK,CAAC;EACnE,CAAC;EACD,MAAMX,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB,MAAMC,SAAS,CAAC,CAAC;IACjBS,OAAO,CAAC,IAAI,CAAC;IACbE,QAAQ,CAAC,IAAI,CAAC;IACdE,YAAY,CAACW,UAAU,CAAC,MAAM,CAAC;IAC/BX,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC;IAChCvB,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACpBiB,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;EACvD,CAAC;EAEC,oBACEhB,OAAA,CAACC,WAAW,CAACqB,QAAQ;IAACC,KAAK,EAAE;MAAElB,IAAI;MAAEE,KAAK;MAAEU,KAAK;MAAErB;IAAO,CAAE;IAAAO,QAAA,EACzDA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;AAACvB,EAAA,CAxCuBF,YAAY;AAAA0B,EAAA,GAAZ1B,YAAY;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}